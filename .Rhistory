demo()
load("C:/Users/rnorm/UNCCHARDATA/MyData/18-R/1/Activities/01_Ins_RBasics/Solved/.RData")
# Numeric
a <- 3
b <- 3.1415
# Character
c <- "This is a string"
d <- "Yet another string"
# Boolean
e <- TRUE
f <- FALSE
g <- T
h <- F
# A vector is a basic unit of data structure in R
# All elements in a vector must be of the same type
#python_list = ["name", 23, "number", FALSE]
disney_characters <- c("mickey", "minnie", "donald", "goofy")
presidents <- c("washington", "adams", "jefferson")
numbers_vector <- c(1, 3, 5, 7, 9, 11)
print(disney_characters)
presidents[1]
combined_vector <- c(disney_characters, presidents)
combined_vector
combined_vector <- c(disney_characters, numbers_vector)
combined_vector
combined_vector <- c(disney_characters, presidents)
combined_vector
for (x in combined_vector){
print(x)}
numeric_vector <- 1:length(combined_vector)
print(numeric_vector)
squared_vector <- numeric_vector**2
print(squared_vector)
for (prez in presidents){
if (nchar(prez) > 5){
next
}
else {
print(prez)
}
}
print(presidents)
install.packages("splitstackshape")
install.packages("tidyverse")
install.packages("reshape2")
install.packages("devtools")
install.packages("plotly")
install.packages("crosstalk")
install.packages("DT")
install.packages("fivethirtyeight")
# Simple vectors
# Months of the year
months <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
# Average rainfall/precipitation in NYC during each month
precipitation <- c(3.9, 2.9, 4.1, 3.9, 4.5, 3.5, 4.5, 4.1, 4.0, 3.4, 3.8, 3.6)
names(precipitation) <- months
print(precipitation)
print(names(precipitation))
print(precipitation)
mar_precipitation <- precipitation["Mar"]
print(mar_precipitation)
summary(precipitation)
summary(names)
precipitation %>% summary()
names(precipitation) <- months
install.packages("dplyr")
precipitation %>% summary()
library(dplyr)
precipitation %>% summary()
precipitation_summary[["Max."]]
precipitation_summary <- summary(precipitation)
precipitation_summary[["Max."]]
print(precipitation)
9
precipitation[["Sep"]]
length(precipitation)
yearly_precipitation <- sum(precipitation)
yearly_precipitation
precipitation %>% length()
yearly_precipitation2 <- precipitation %>% sum()
print(yearly_precipitation2)
install.packages(c("broom", "dbplyr", "isoband", "purrr", "reshape2", "rex", "tibble", "withr"))
R --version
install.packages("tidyverse")
install.packages(jsonlite)
install.packages("jsonlite")
R --version
R --version
R --versions
version
?version
R.version
R.version
R.version()
R
version
?version
R
R --version
R.version
library("tidyverse")
a = 3
a <- 3
c <- "this is a string"
e <- TRUE
g <- T
f <- f
f <- F
h <- FALSE
i <- false
i <- "false"
j  <- FALSE
?c()
?c
my_vector <- c(1,2,4,5,6)
my_vector2 <- c("hello", 1, "bye", 20)
[3]
my_vector
my_vector[1]
my_vector[2]
my_vector[3]
my_vector[6]
my_vector[0]
for (x in my_vector){
print(x)
}
{print("This is false")}
if (my_vector[2] = 2){
print("This is true")
}
else
{print("This is false")}
if (my_vector[2] < 2){
print("This is true")
}
else
{print("This is false")}
if (my_vector[2] == 2){
print("This is true")
}
else
{print("This is false")}
if (my_vector[2] == 2){
print("This is true")
else
{print("This is false")}}
if (my_vector[2] == 2){
print("This is true")
}
else {
print("This is false")
}
if (my_vector[2] == 2){
print("This is true")
}else {
print("This is false")
}
if (my_vector[2] == 2){
print("This is true")
} else {
print("This is false")
}
if (my_vector[2] == 2){
print("This is true")
}
else {
print("This is false")
}
if (my_vector[2] == 2){
print("This is true")
} else {
print("This is false")
}
?typeof
typeof(f)
typeof(F)
typeof(TRUE)
typeof(a)
typeof(c)
typeof(my_vector)
typeof(my_vector2)
demo <- read.csv("C:/Users/rnorm/Trilogy/DataViz/Outofthenorm27/R_Analysis/01_Demo/demo.csv")
View(demo)
demo["Vehicle_Class"]
demo[2]
demo[3,1]
demo[3,4]
demo$Vehicle_Class
demo$Vehicle_Class[2]
filter_demo <- demo[demo$Year >= 2017]
filter_demo
View(filter_demo)
filter_demo <- demo[demo$Year >= 2017,]
filter_demo
View(filter_demo)
?subset
subset(demo,year >= 2017)
subset(demo, Year >= 2017)
subset(demo, Year >= 2017, "Vehicle_Class")
subset(demo, Year >= 2017, Vehicle_Class)
subset(demo, Year >= 2017, 2)
subset(demo, Year >= 2017, vehicle_class)
subset(demo, Year >= 2017, 2)
subset(demo, Year >= 2017 & Total_Miles < 15000, 2)
?mutate
my_vector
?replace
replace(demo[3,1],"2020")
?mutate
transmute(.demo, Year=2020)
transmute(demo, Year=2020)
View(demo)
transmute(demo[3,1], Year=2012)
demo mutate(Color="Red",IsActive=TRUE)
demo %>% mutate(Color="Red",IsActive=TRUE)
?%>%
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
toFahrenheit <- function(temperature) {
fahrenheit <- temperature * 1.8 + 32
return(fahrenheit)
}
celsius <- c(0, -2, 0, 5.2, 5.4)
fahrenheit <- numeric()
for (i in 1:length(celsius)) {
temperature_fahrenheit <- toFahrenheit(celsius[i])
fahrenheit[i] <- temperature_fahrenheit
}
fahrenheit
fahrenheit2 <- sapply(celsius, toFahrenheit)
fahrenheit2
fahrenheit3 <- lapply(celsius, toFahrenheit)
fahrenheit3
toFahrenheit(celsius)
fahrenheit
# remove objects from workspace
rm(list = ls())
install.packages("tidyverse")
install.packages("jsonlite")
setwd("C:/Users/rnorm/Trilogy/DataViz/Online/Vandy/MyRepo/R")
?read.csv()
?nchar()
# Call the function with the student vector as an argument.
roll_call(students)
# Part I
students <- c("Andrew","Matt","Alex","Marty")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (x in students) {
print(x)
}
}
# Call the function with the student vector as an argument.
roll_call(students)
library(dplyr)
# Simple vectors
# Months of the year
months <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
# Average rainfall/precipitation in NYC during each month
precipitation <- c(3.9, 2.9, 4.1, 3.9, 4.5, 3.5, 4.5, 4.1, 4.0, 3.4, 3.8, 3.6)
print(months)
print(precipitation)
names(precipitation) <- months
print(months)
print(precipitation)
print(names(precipitation))
mar_precipitation <- precipitation["Mar"]
print(mar_precipitation)
precipitation$Mar
summary(precipitation)
# Store the results in a vector.
precipitation_summary <- summary(precipitation)
precipitation_summary["Min."]
# Use pipe operators to express a sequence of operations
precipitation %>% summary()
# Use pipe operators to express a sequence of operations
precipitation %>% summary()
precipitation_summary[["Max."]]
